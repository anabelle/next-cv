import React from 'react';
import { render, screen } from '@testing-library/react';
import PDFDownloadButton from './PDFDownloadButton';

// Mock FontAwesomeIcon
jest.mock('@fortawesome/react-fontawesome', () => ({
  FontAwesomeIcon: () => <i data-testid="pdf-icon"></i>,
}));

// Mock usePrefersDarkMode hook
jest.mock('../../helpers/useDarkMode', () => ({
  __esModule: true,
  default: jest.fn(),
}));

// Mock the Button style
jest.mock('../../strum-design-system/components/Button/Button.css', () => ({
  buttonStyle: jest.fn(() => 'mock-button-style'),
}));

// Mock the atoms function
jest.mock('../../strum-design-system/sprinkles.css', () => ({
  atoms: jest.fn(() => 'mock-atoms-class'),
}));

// Import the mocked hook to control its return value
import usePrefersDarkMode from '../../helpers/useDarkMode';

describe('PDFDownloadButton', () => {
  const mockedUsePrefersDarkMode = usePrefersDarkMode as jest.Mock;

  beforeEach(() => {
    // Reset mocks and set default return value for the hook
    mockedUsePrefersDarkMode.mockClear();
    mockedUsePrefersDarkMode.mockReturnValue(false); // Default to light mode
  });

  it('should render the correct link when secret is not provided', () => {
    render(<PDFDownloadButton />);

    const link = screen.getByRole('link');
    expect(link).toBeInTheDocument();
    expect(link).toHaveAttribute('href', '/api/pdf');
    expect(link).toHaveAttribute('target', '_blank');
    expect(link).toHaveTextContent('View or Download PDF');
  });

  it('should render the correct link when secret is provided', () => {
    const testSecret = 'my-test-secret';
    render(<PDFDownloadButton secret={testSecret} />);

    const link = screen.getByRole('link');
    expect(link).toBeInTheDocument();
    expect(link).toHaveAttribute('href', `/api/pdf?secret=${testSecret}`);
    expect(link).toHaveAttribute('target', '_blank');
    expect(link).toHaveTextContent('View or Download PDF');
  });

  it('should apply correct classes based on dark mode (light mode)', () => {
    mockedUsePrefersDarkMode.mockReturnValue(false); // Explicitly set light mode
    render(<PDFDownloadButton />);
    // We can't easily test the exact className generated by vanilla-extract here,
    // but we know the 'color' prop passed to buttonStyle depends on darkMode.
    // A more advanced test could involve snapshot testing or checking computed styles.
    // For coverage, just rendering is enough as the hook value affects the props.
    expect(screen.getByRole('link')).toBeInTheDocument();
  });

  it('should apply correct classes based on dark mode (dark mode)', () => {
    mockedUsePrefersDarkMode.mockReturnValue(true); // Explicitly set dark mode
    render(<PDFDownloadButton />);
    expect(screen.getByRole('link')).toBeInTheDocument();
  });
});
